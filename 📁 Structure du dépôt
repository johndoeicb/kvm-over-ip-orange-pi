kvm-over-ip-orange-pi/
├── app/
│   ├── app.py                # Interface Flask
│   ├── templates/
│   │   └── index.html        # Interface web simple
├── scripts/
│   ├── start_vpn.sh          # Lance OpenVPN en arrière-plan
│   └── wol.sh                # Envoie un paquet Wake-on-LAN
├── static/
│   └── style.css             # (Optionnel) Style minimal
├── mjpg-streamer/            # Cloné depuis GitHub (non modifié ici)
├── requirements.txt          # Dépendances Python
├── README.md                 # Présentation complète
└── schema.png                # Schéma visuel du système
🧠 1. app.py (Flask minimal avec boutons)
python
Copy
Edit
from flask import Flask, render_template, request
import subprocess

app = Flask(__name__)

ALLOWED_IP = "192.168.1.100"  # Adresse IP autorisée

@app.before_request
def limit_remote_addr():
    if request.remote_addr != ALLOWED_IP:
        return "Accès refusé", 403

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/start-vpn')
def start_vpn():
    subprocess.Popen(['bash', './scripts/start_vpn.sh'])
    return "VPN démarré."

@app.route('/wake-server')
def wake_server():
    subprocess.call(['bash', './scripts/wol.sh'])
    return "Paquet WOL envoyé."

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
🧾 2. requirements.txt
ini
Copy
Edit
Flask==2.3.3
🖥️ 3. index.html (interface très simple)
html
Copy
Edit
<!DOCTYPE html>
<html>
<head>
  <title>KVM Control Panel</title>
</head>
<body>
  <h1>KVM over IP – Orange Pi</h1>
  <button onclick="fetch('/wake-server')">Réveiller le serveur</button>
  <button onclick="fetch('/start-vpn')">Démarrer VPN</button>
</body>
</html>
🧰 4. start_vpn.sh
bash
Copy
Edit
#!/bin/bash
sudo openvpn --config /etc/openvpn/client.conf --daemon
🌐 5. wol.sh
bash
Copy
Edit
#!/bin/bash
etherwake -i eth0 AA:BB:CC:DD:EE:FF
(Remplace l'adresse MAC par celle de ton serveur Proxmox.)
